#!/usr/bin/env bash

# Enable debug mode if DEBUG is set
[[ -n $DEBUG ]] && set -x

# Color codes for output
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[1;33m'
reset='\033[0m'

# Global variables
INSTALL=false
UPDATE=false
VERSION=""
VERBOSE=false
DRY_RUN=false

# Function to print usage
usage() {
  echo -e "Usage: \`phpenv [VERSION]\` or \`phpenv -i [VERSION]\` or \`phpenv -u [VERSION]\`"
  echo -e "Example: \`phpenv 83\` or \`phpenv -i 83\` or \`phpenv -u 81\`"
  echo -e "Options:"
  echo -e "  -i             Install the specified PHP version"
  echo -e "  -u             Update and build the specified PHP version"
  echo -e "  -v             Enable verbose output"
  echo -e "  --dry-run      Perform a dry run without making changes"
  echo -e "  -h, --help     Show this help message"
}

# Function to log messages
log() {
  [[ $VERBOSE == true ]] && echo -e "$1"
}

# Function to check if the required tools are installed
check_tools() {
  for tool in git makepkg; do
    if ! command -v $tool &> /dev/null; then
      echo -e "${red}Error: $tool is not installed. Please install it and try again.${reset}"
      exit 1
    fi
  done
}

# Function to install PHP
install_php() {
  log "${green}Installing PHP $VERSION...${reset}"

  # Create directories if they do not exist
  [[ ! -d "$HOME/bin" ]] && mkdir -p "$HOME/bin"
  [[ ! -d "$HOME/src" ]] && mkdir -p "$HOME/src"
  cd "$HOME/src" || {
    echo -e "${red}Error: Failed to navigate to $HOME/src directory${reset}"
    exit 1
  }

  REPO_URL="https://aur.archlinux.org/php$VERSION.git"
  if [[ -d "php$VERSION" ]]; then
    read -rp "$(echo -e "${yellow}Directory php$VERSION already exists. Do you want to remove it? (y/n)${reset} ")" remove_response
    if [[ "$remove_response" =~ ^[Yy]$ ]]; then
      log "${yellow}Removing directory php$VERSION...${reset}"
      [[ $DRY_RUN == false ]] && rm -rf "php$VERSION" || {
        echo -e "${red}Error: Failed to remove existing directory php$VERSION${reset}"
        exit 1
      }
    else
      echo -e "${yellow}Consider using 'phpenv -u $VERSION' to update PHP version $VERSION.${reset}"
      exit 0
    fi
  fi

  log "${green}Cloning from $REPO_URL...${reset}"
  [[ $DRY_RUN == false ]] && git clone $REPO_URL || {
    echo -e "${red}Error: Failed to clone repository from $REPO_URL${reset}"
    exit 1
  }

  cd "php$VERSION" || {
    echo -e "${red}Error: Failed to navigate to php$VERSION directory${reset}"
    exit 1
  }

  log "${green}Starting the build process...${reset}"
  [[ $DRY_RUN == false ]] && makepkg -si || {
    echo -e "${red}Error: Failed to build and install PHP $VERSION${reset}"
    exit 1
  }

  if [[ ! -x "$PHP_BIN" ]]; then
    echo -e "${red}Error: PHP $VERSION binary not found at $PHP_BIN after installation${reset}"
    exit 1
  fi
}

# Function to update and build PHP
update_php() {
  log "${green}Updating and building PHP $VERSION...${reset}"

  # Check if directory exists
  cd "$HOME/src" || {
    echo -e "${red}Error: Failed to navigate to $HOME/src directory${reset}"
    exit 1
  }

  if [[ ! -d "php$VERSION" ]]; then
    echo -e "${red}Error: Directory php$VERSION does not exist. Use -i to install.${reset}"
    exit 1
  fi

  cd "php$VERSION" || {
    echo -e "${red}Error: Failed to navigate to php$VERSION directory${reset}"
    exit 1
  }

  log "${green}Pulling latest changes from repository...${reset}"
  [[ $DRY_RUN == false ]] && git pull origin main || {
    echo -e "${red}Error: Failed to pull latest changes from repository${reset}"
    exit 1
  }

  log "${green}Starting the build process...${reset}"
  [[ $DRY_RUN == false ]] && makepkg -si || {
    echo -e "${red}Error: Failed to build and install PHP $VERSION${reset}"
    exit 1
  }

  if [[ ! -x "$PHP_BIN" ]]; then
    echo -e "${red}Error: PHP $VERSION binary not found at $PHP_BIN after installation${reset}"
    exit 1
  fi
}

# Function to create symbolic links
create_symlinks() {
  log "${green}Creating symbolic links...${reset}"
  for bin_link in php phpize php-fpm phpdbg php-cgi pear pecl; do
    [[ -L "$HOME/bin/$bin_link" ]] && [[ $DRY_RUN == false ]] && rm -f "$HOME/bin/$bin_link" || {
      echo -e "${red}Error: Failed to remove existing link $HOME/bin/$bin_link${reset}"
      exit 1
    }
  done

  ln -s "$PHP_BIN" "$HOME/bin/php" || { echo -e "${red}Error: Failed to create link for php${reset}"; exit 1; }
  ln -s "$PHPIZE_BIN" "$HOME/bin/phpize" || { echo -e "${red}Error: Failed to create link for phpize${reset}"; exit 1; }
  ln -s "$PHP_FPM_BIN" "$HOME/bin/php-fpm" || { echo -e "${red}Error: Failed to create link for php-fpm${reset}"; exit 1; }
  ln -s "$PHP_DBG_BIN" "$HOME/bin/phpdbg" || { echo -e "${red}Error: Failed to create link for phpdbg${reset}"; exit 1; }
  ln -s "$PHP_CGI_BIN" "$HOME/bin/php-cgi" || { echo -e "${red}Error: Failed to create link for php-cgi${reset}"; exit 1; }
  ln -s "$PHP_PEAR_BIN" "$HOME/bin/pear" || { echo -e "${red}Error: Failed to create link for pear${reset}"; exit 1; }
  ln -s "$PHP_PECL_BIN" "$HOME/bin/pecl" || { echo -e "${red}Error: Failed to create link for pecl${reset}"; exit 1; }

  echo -e "${green}Activated PHP $VERSION.${reset}"
  php -v
}

# Function to parse command-line arguments
parse_arguments() {
  while [[ "$#" -gt 0 ]]; do
    case $1 in
      -i) INSTALL=true; VERSION=$2; shift ;;
      -u) UPDATE=true; VERSION=$2; shift ;;
      -v) VERBOSE=true ;;
      --dry-run) DRY_RUN=true ;;
      -h|--help) usage; exit 0 ;;
      *) VERSION=$1 ;;
    esac
    shift
  done

  if [[ -z $VERSION ]]; then
    echo -e "${red}Error: no version specified!${reset}"
    usage
    exit 1
  fi
}

# Main script execution
parse_arguments "$@"
check_tools

PHP_BIN="/usr/bin/php$VERSION"
PHPIZE_BIN="/usr/bin/phpize$VERSION"
PHP_FPM_BIN="/usr/bin/php-fpm$VERSION"
PHP_DBG_BIN="/usr/bin/phpdbg$VERSION"
PHP_CGI_BIN="/usr/bin/php-cgi$VERSION"
PHP_PEAR_BIN="/usr/bin/pear$VERSION"
PHP_PECL_BIN="/usr/bin/pecl$VERSION"

if [[ $INSTALL == true ]]; then
  install_php
elif [[ $UPDATE == true ]]; then
  update_php
fi

if [[ ! -x "$PHP_BIN" ]]; then
  echo -e "${red}Error: PHP $VERSION binary not found at $PHP_BIN${reset}"
  exit 1
fi

create_symlinks
